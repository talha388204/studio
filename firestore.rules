/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and carts,
 * while allowing users to create orders that are associated with their user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user.
 * - /users/{userId}/cart/{cartItemId}: Stores cart items. Accessible only by the user.
 * - /orders/{orderId}: Stores order information.  Orders are accessible to the user who created them.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile and cart data.
 * - Orders can be created by any authenticated user and are associated with their userId.
 * - Listing of users or cart items is restricted to the owner of the data.
 * - Data validation is relaxed in this prototyping phase to allow for rapid schema iteration,
 *   except for critical ownership and relational integrity checks.
 *
 * Denormalization for Authorization:
 * - The `Order` entity contains a `userId` field, which is used to associate the order with the user who created it.
 *   This avoids the need for complex queries to determine order ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (read, write) User with UID 'user123' can read/write their own profile at /users/user123.
     * @deny (read, write) User with UID 'user456' cannot read/write profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function isSignedIn() {
       // return request.auth != null;
      //}

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects user carts, allowing only the owner to read and write.
     * @path /users/{userId}/cart/{cartItemId}
     * @allow (read, write) User with UID 'user123' can read/write their own cart at /users/user123/cart/item001.
     * @deny (read, write) User with UID 'user456' cannot read/write cart at /users/user123/cart/item001.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/cart/{cartItemId} {

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to orders, allowing users to create orders for themselves.
     * @path /orders/{orderId}
     * @allow (create) User with UID 'user123' can create an order with userId 'user123' at /orders/order001.
     * @allow (get) User with UID 'user123' can get an order with userId 'user123' at /orders/order001.
     * @deny (create) User with UID 'user456' cannot create an order with userId 'user123' at /orders/order001.
     * @deny (update) User with UID 'user456' cannot update order with userId 'user123' at /orders/order001.
     * @deny (delete) User with UID 'user456' cannot delete order with userId 'user123' at /orders/order001.
     * @principle Orders can be created by any authenticated user, but only modified/deleted by owner.
     */
    match /orders/{orderId} {

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if true; // Allow public read
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}