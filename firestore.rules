/**
 * @description This ruleset enforces a strict user-ownership model, where each user can only access their own profile and cart data.
 * @dataStructure All user data is nested under `/users/{userId}`, with profile information directly under the user ID and cart items in a subcollection.
 * @keySecurityDecisions Users can only read and write their own profiles and cart data. Listing all users or carts is disallowed. No public data access is permitted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with UID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requested user ID matches the authenticated user's ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      // Function to check if the requested user ID matches the authenticated user's ID and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read, create, update, and delete items in their own cart.
     * @path /users/{userId}/cart/{cartItemId}
     * @allow (get, create, update, delete) User with UID 'user123' can access /users/user123/cart/item1.
     * @deny (get, create, update, delete) User with UID 'user456' cannot access /users/user123/cart/item1.
     * @principle Restricts cart access to the owning user.
     */
    match /users/{userId}/cart/{cartItemId} {
       // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requested user ID matches the authenticated user's ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      // Function to check if the requested user ID matches the authenticated user's ID and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}