/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and shopping carts.
 * Orders can be viewed by anyone.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user.
 * - /users/{userId}/cart/{cartItemId}: Stores individual cart items for a user, accessible only to the user.
 * - /orders/{orderId}: Stores order information; accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Cart items are strictly user-owned and not publicly accessible.
 *
 * Denormalization for Authorization:
 *  - User profile and cart data are nested under /users/{userId} to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (list) Listing all users is prohibited.
     * @deny (create) Non-authenticated users and other users can't create profiles.
     * @deny (get) Non-authenticated users and other users can't read profiles.
     * @deny (update) Non-authenticated users and other users can't update profiles.
     * @deny (delete) Non-authenticated users and other users can't delete profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string && request.resource.data.createdAt is string;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.email == request.resource.data.email && resource.data.createdAt == request.resource.data.createdAt;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to cart items for a specific user.
     * @path /users/{userId}/cart/{cartItemId}
     * @allow (create) Authenticated user can create cart items in their own cart.
     * @allow (get) Authenticated user can read cart items in their own cart.
     * @allow (update) Authenticated user can update cart items in their own cart.
     * @allow (delete) Authenticated user can delete cart items in their own cart.
     * @allow (list) Authenticated user can list cart items in their own cart.
     * @deny (create) Non-authenticated users and other users can't create cart items.
     * @deny (get) Non-authenticated users and other users can't read cart items.
     * @deny (update) Non-authenticated users and other users can't update cart items.
     * @deny (delete) Non-authenticated users and other users can't delete cart items.
     * @principle Enforces document ownership for cart items.
     */
    match /users/{userId}/cart/{cartItemId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.productId is number && request.resource.data.title is string && request.resource.data.price is number && request.resource.data.image is string && request.resource.data.quantity is number;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.productId == request.resource.data.productId && resource.data.title == request.resource.data.title && resource.data.price == request.resource.data.price && resource.data.image == request.resource.data.image && resource.data.quantity == request.resource.data.quantity;
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Grants access to order documents for any signed-in user.
      * @path /orders/{orderId}
      * @allow (get) Any signed-in user can read order documents.
      * @allow (list) Any signed-in user can list order documents.
      * @deny (create) Only authenticated users are allowed to create an order.
      * @deny (update) Orders cannot be updated once created.
      * @deny (delete) Orders cannot be deleted.
      * @principle Orders are publicly readable for signed-in users, but only created, not modified or deleted.
      */
      match /orders/{orderId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId is string && request.resource.data.items is list && request.resource.data.total is number && request.resource.data.shippingAddress is map && request.resource.data.status is string && request.resource.data.createdAt is string;
        allow update: if false;
        allow delete: if false;
    }
  }
}