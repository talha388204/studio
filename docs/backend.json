{
  "entities": {
    "UserAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAccount",
      "type": "object",
      "description": "Represents a user account within the Ekta Game Studio app.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user account."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time when the user registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "registrationDate"
      ]
    },
    "Game": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Game",
      "type": "object",
      "description": "Represents a game available in the Ekta Game Studio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the game."
        },
        "name": {
          "type": "string",
          "description": "The name of the game."
        },
        "description": {
          "type": "string",
          "description": "A description of the game."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL to the game's image or cover art.",
          "format": "uri"
        },
        "downloadUrl": {
          "type": "string",
          "description": "URL where the game can be downloaded.",
          "format": "uri"
        },
        "compatibilityInfo": {
          "type": "string",
          "description": "Information about the game's device compatibility."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl",
        "downloadUrl",
        "compatibilityInfo"
      ]
    },
    "UserGamePreference": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserGamePreference",
      "type": "object",
      "description": "Represents a user's preferences for a specific game.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user game preference."
        },
        "userAccountId": {
          "type": "string",
          "description": "Reference to UserAccount. (Relationship: UserAccount 1:N UserGamePreference)"
        },
        "gameId": {
          "type": "string",
          "description": "Reference to Game. (Relationship: Game 1:N UserGamePreference)"
        },
        "graphicsSettings": {
          "type": "string",
          "description": "User's preferred graphics settings for the game (e.g., low, medium, high)."
        },
        "lastPlayed": {
          "type": "string",
          "description": "The last date and time the user played the game.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userAccountId",
        "gameId",
        "graphicsSettings",
        "lastPlayed"
      ]
    },
    "GameRecommendation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GameRecommendation",
      "type": "object",
      "description": "Represents a game recommendation for a specific user, generated by the AI recommendation tool.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the game recommendation."
        },
        "userAccountId": {
          "type": "string",
          "description": "Reference to UserAccount. (Relationship: UserAccount 1:N GameRecommendation)"
        },
        "gameId": {
          "type": "string",
          "description": "Reference to Game. (Relationship: Game 1:N GameRecommendation)"
        },
        "recommendationDate": {
          "type": "string",
          "description": "The date and time when the game was recommended.",
          "format": "date-time"
        },
        "recommendationReason": {
          "type": "string",
          "description": "The reason why the game was recommended to the user."
        }
      },
      "required": [
        "id",
        "userAccountId",
        "gameId",
        "recommendationDate",
        "recommendationReason"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/user_accounts/{userAccountId}",
        "definition": {
          "entityName": "UserAccount",
          "schema": {
            "$ref": "#/backend/entities/UserAccount"
          },
          "description": "Stores user account information.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique ID of the user account."
            }
          ]
        }
      },
      {
        "path": "/games/{gameId}",
        "definition": {
          "entityName": "Game",
          "schema": {
            "$ref": "#/backend/entities/Game"
          },
          "description": "Stores information about available games.",
          "params": [
            {
              "name": "gameId",
              "description": "The unique ID of the game."
            }
          ]
        }
      },
      {
        "path": "/user_accounts/{userAccountId}/game_preferences/{gamePreferenceId}",
        "definition": {
          "entityName": "UserGamePreference",
          "schema": {
            "$ref": "#/backend/entities/UserGamePreference"
          },
          "description": "Stores user-specific game preferences. Enforces path-based ownership.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique ID of the user account."
            },
            {
              "name": "gamePreferenceId",
              "description": "The unique ID of the user's game preference."
            }
          ]
        }
      },
      {
        "path": "/user_accounts/{userAccountId}/game_recommendations/{gameRecommendationId}",
        "definition": {
          "entityName": "GameRecommendation",
          "schema": {
            "$ref": "#/backend/entities/GameRecommendation"
          },
          "description": "Stores AI-powered game recommendations for each user. Enforces path-based ownership.",
          "params": [
            {
              "name": "userAccountId",
              "description": "The unique ID of the user account."
            },
            {
              "name": "gameRecommendationId",
              "description": "The unique ID of the game recommendation."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the Ekta Game Studio application, focusing on user accounts, games, user preferences, and game recommendations. The structure emphasizes authorization independence and enables secure list operations.\n\n*   **User Accounts:** User accounts are stored in a dedicated collection (`/user_accounts/{userAccountId}`). This allows for easy management of user data.\n*   **Games:** Game data is stored in a root-level collection (`/games/{gameId}`). This ensures global accessibility and simplifies querying for all games.\n*   **User Game Preferences:** User-specific game preferences are stored under the user's account (`/user_accounts/{userAccountId}/game_preferences/{gamePreferenceId}`). This structure enforces ownership and simplifies security rules.\n*   **Game Recommendations:** AI-powered game recommendations are stored similarly to user preferences, nested under the user account (`/user_accounts/{userAccountId}/game_recommendations/{gameRecommendationId}`). This maintains a clear ownership model.\n\n**Authorization Independence:** The structure avoids hierarchical authorization dependencies by directly associating user-specific data (preferences, recommendations) with the user's account document. This eliminates the need for `get()` calls in security rules to check parent document attributes.\n\n**QAPs (Rules are not Filters):**\n*   The segregation of user-specific data into subcollections of user accounts enables secure `list` operations. Security rules can easily enforce that a user can only list their own preferences and recommendations. The root-level `/games` collection allows for public listing of game data without exposing sensitive information."
  }
}